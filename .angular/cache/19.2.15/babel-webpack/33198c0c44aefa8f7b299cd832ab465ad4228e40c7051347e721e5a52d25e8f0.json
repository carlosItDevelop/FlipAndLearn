{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TranslationService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';\n    // Get API key from environment or use empty string as fallback\n    this.apiKey = window._env?.GEMINI_API_KEY || '';\n  }\n  translateText(request) {\n    if (!this.apiKey) {\n      return throwError(() => new Error('Gemini API key is not configured. Please set GEMINI_API_KEY environment variable.'));\n    }\n    const prompt = this.buildPrompt(request);\n    const payload = {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: prompt\n        }]\n      }]\n    };\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.baseUrl}?key=${this.apiKey}`;\n    return this.http.post(url, payload, {\n      headers\n    }).pipe(map(response => {\n      if (response.candidates && response.candidates.length > 0) {\n        const translatedText = response.candidates[0].content.parts[0].text.trim();\n        return translatedText;\n      }\n      throw new Error('Empty response from translation API');\n    }), catchError(error => {\n      console.error('Translation error:', error);\n      if (error.status === 400) {\n        return throwError(() => new Error('Invalid request to translation API. Please check your input.'));\n      } else if (error.status === 401) {\n        return throwError(() => new Error('Invalid API key. Please check your Gemini API configuration.'));\n      } else if (error.status === 429) {\n        return throwError(() => new Error('Translation quota exceeded. Please try again later.'));\n      }\n      return throwError(() => new Error('Translation service is currently unavailable. Please try again later.'));\n    }));\n  }\n  buildPrompt(request) {\n    const sourceLanguage = request.targetLanguage === 'en' ? 'Portuguese' : 'English';\n    const targetLanguage = request.targetLanguage === 'en' ? 'English' : 'Portuguese';\n    return `Translate the following sentence from ${sourceLanguage} to ${targetLanguage}. Only return the translated text, without any introductory phrases or explanations. The text is: \"${request.text}\"`;\n  }\n  static {\n    this.ɵfac = function TranslationService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TranslationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TranslationService,\n      factory: TranslationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","map","TranslationService","constructor","http","baseUrl","apiKey","window","_env","GEMINI_API_KEY","translateText","request","Error","prompt","buildPrompt","payload","contents","role","parts","text","headers","url","post","pipe","response","candidates","length","translatedText","content","trim","error","console","status","sourceLanguage","targetLanguage","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/runner/workspace/src/app/services/translation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nexport interface TranslationRequest {\n  text: string;\n  targetLanguage: 'en' | 'pt';\n}\n\nexport interface GeminiResponse {\n  candidates: Array<{\n    content: {\n      parts: Array<{\n        text: string;\n      }>;\n    };\n  }>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationService {\n  private readonly apiKey: string;\n  private readonly baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';\n\n  constructor(private http: HttpClient) {\n    // Get API key from environment or use empty string as fallback\n    this.apiKey = (window as any)._env?.GEMINI_API_KEY || '';\n  }\n\n  translateText(request: TranslationRequest): Observable<string> {\n    if (!this.apiKey) {\n      return throwError(() => new Error('Gemini API key is not configured. Please set GEMINI_API_KEY environment variable.'));\n    }\n\n    const prompt = this.buildPrompt(request);\n    const payload = {\n      contents: [{ role: \"user\", parts: [{ text: prompt }] }]\n    };\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    const url = `${this.baseUrl}?key=${this.apiKey}`;\n\n    return this.http.post<GeminiResponse>(url, payload, { headers }).pipe(\n      map(response => {\n        if (response.candidates && response.candidates.length > 0) {\n          const translatedText = response.candidates[0].content.parts[0].text.trim();\n          return translatedText;\n        }\n        throw new Error('Empty response from translation API');\n      }),\n      catchError(error => {\n        console.error('Translation error:', error);\n        if (error.status === 400) {\n          return throwError(() => new Error('Invalid request to translation API. Please check your input.'));\n        } else if (error.status === 401) {\n          return throwError(() => new Error('Invalid API key. Please check your Gemini API configuration.'));\n        } else if (error.status === 429) {\n          return throwError(() => new Error('Translation quota exceeded. Please try again later.'));\n        }\n        return throwError(() => new Error('Translation service is currently unavailable. Please try again later.'));\n      })\n    );\n  }\n\n  private buildPrompt(request: TranslationRequest): string {\n    const sourceLanguage = request.targetLanguage === 'en' ? 'Portuguese' : 'English';\n    const targetLanguage = request.targetLanguage === 'en' ? 'English' : 'Portuguese';\n    \n    return `Translate the following sentence from ${sourceLanguage} to ${targetLanguage}. Only return the translated text, without any introductory phrases or explanations. The text is: \"${request.text}\"`;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}